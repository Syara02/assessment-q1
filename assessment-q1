<?php

class TaskScheduler {

    /** @var array $tasks The list of tasks and their dependencies. */
    private $tasks;

    /** @var array $order The computed order of tasks. */
    private $order;

    /** Constructor for the TaskScheduler class. */
    public function __construct($tasks) {
        $this->tasks = $tasks;
        $this->order = [];
    }

    /**
     * Compute the correct ordering for the tasks.
     *
     * @return array The computed order of tasks.
     *
     * @throws Exception If the ordering is not possible due to circular dependencies.
     */
    public function compute_order() {
        $visited = [];
        $stack = [];

        foreach ($this->tasks as $task) {
            $name = $task['name'];
            if (!isset($visited[$name])) {
                $this->dfs($name, $visited, $stack);
            }
        }

        return $this->order;
    }

    private function dfs($task, &$visited, &$stack) {
        $visited[$task] = true;
        $stack[$task] = true;

        foreach ($this->tasks as $t) {
            if ($t['name'] == $task) {
                foreach ($t['depends_on'] as $dependency) {
                    if (!isset($visited[$dependency])) {
                        $this->dfs($dependency, $visited, $stack);
                    }
                    elseif (isset($stack[$dependency])) {
                        throw new Exception("Circular dependency detected.");
                    }
                }
            }
        }

        array_push($this->order, $task);
        unset($stack[$task]);
    }
}

// Example 1: Computing the order of tasks
$tasks = [
    [
        "name" => "compile",
        "depends_on" => ["check_build_script", "lint"]
    ],
    [
        "name" => "lint",
        "depends_on" => ["check_build_script"]
    ],
    [
        "name" => "package",
        "depends_on" => ["compile"]
    ],
    [
        "name" => "test",
        "depends_on" => ["package"]
    ]
];

$taskScheduler = new TaskScheduler($tasks);
try {
    $order = $taskScheduler->compute_order();
    echo "The correct order of tasks is: " ."\n";
    foreach ($order as $task) {
        echo " -" . $task . "\n";
    }
    // implode(" -> ", $order) . "\n";
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
}

?>
